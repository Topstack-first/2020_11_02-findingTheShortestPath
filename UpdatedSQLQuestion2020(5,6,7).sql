/*

This is a programming project which must be done in Microsoft SQL Server Transact-SQL, 
version 2017+. Submit a single file with a .SQL extension.  

PROBLEM DESCRIPTION: FUMAR is the name of a 
motorized robot that sits on a flat plane on the surface of Mars and takes 4 soil samples 
every day.  The four locations are determined at random, but are all within 100 meters on
the X and Y axis of the point where the probe came to rest the previous day.  The software 
you are writing will determine the shortest path that the probe can possibly take to reach 
all four points.

The FUMAR always travels in a straight line between sites.  There are no obstructions on
the Martian plane for it to avoid.

Consider the following diagram:
                                                  
                                                  |+100  
                                                  |
                                                  |  X <-- Site 4 (4, 90)
                                                  |
                                                  |+80
                                                  |
     X <-- Site 3 (-92, 70)                       |
                                                  |
                                                  |+60
                                                  |
                                                  |
                                                  |
                                                  |+40
                                                  |                 X <-- Site 2 (36, 34)
                                                  |
                                                  |
                                                  |+20
                                                  | 
-100     -80       -60       -40       -20        |        +20       +40       +60       +80	  +100 
|---------|---------|---------|---------|---------O---------|---------|---------|---------|---------|
                                                 /|
                                                / |
                                               /  |
                  Original FUMAR Location (0,0)   |-20      X <-- Site 1 (20, -20)
                                                  |
                                                  |
                                                  |
                                                  |-40
                                                  |
                                                  |
                                                  |
                                                  |-60
                                                  |
                                                  |
                                                  |
                                                  |-80
                                                  |
                                                  |
                                                  |
                                                  |-100

The FUMAR must move from the origin to all 4 sites in the order that makes for the overall shortest path.
The FUMAR *will not* neccessarily move from Site 1, to Site 2, etc.
The FUMAR comes to rest at the last point reached, it does not return to the origin.

This is a variation of a travelling salesman problem.  The expected solution will use brute force, which
is appropriate in this case (the number of points are very small, and the cost of making the FUMAR travel
an imperfect path is very expensive).  A brute force solution calculates all possible paths, and picks
the shortest one.  Numerous other potential solutions exist.

There are two parts to this solution.

First, construct the view FUMAR_PATHS which represents all vertices in a connected graph; that is to say,
a straight line vertex between every site and every other site.  
HINT: All the math required for this is at http://www.mathopenref.com/coorddist.html

Second, construct the stored procedure GET_SHORTEST_FUMAR_PATH which will output (select) a result set 
as follows:
	Distance                                ThePath
	--------------------------------------- --------------------------------------------------------------------------------------------------------------
	247.16                                  Original Position (0, 0) --> Site 1 (20, -20) --> Site 2 (36, 34) --> Site 4 (4, 90) --> Site 3 (-92, 70)
    (1 row(s) affected)
HINT: This is the correct solution given the points shown in the example...

You *MAY NOT* alter the table structures, procedures, or views I have put in this file except where comments 
indicate you should.


* You must correctly constructing the FUMAR_PATHS view.
* You must get the correct answer, on 2 random sets of sites 
  (generated by the provided "GENERATE_FUMAR_SITES" procedure)

The testing procedure will be as follows:
* I will execute GENERATE_FUMAR_SITES
* I will look at your view FUMAR_PATHS, and determine if it contains correct data.
* I will execute your procedure GET_SHORTEST_FUMAR_PATHS and see what happens.
* You must include comments explaining your code
* I will try the same thing on a different set of random coordinates.

Once you have completed the main problem
* make a procedure "GENERATE_N_FUMAR_SITES (@siteCount int)" which creates @siteCount 
  sites in the underlying table instead of 4
* validate that GET_SHORTEST_FUMAR_PATHS works for @siteCount sites, instead of 4
* (as text in this file) record how long it takes for GET_SHORTEST_FUMAR_PATHS to 
  run on a variety of site of counts.  Are the results as you expected?  Why or why not?

*/

-- DO NOT ALTER THIS TABLE.  It is set up to allow you to solve the problem easily
drop table FUMAR_SITES
go

create table FUMAR_SITES (
    SiteNumber int primary key nonclustered,
    SiteName nvarchar(100),
    XCoordinate int check (XCoordinate between -100 and 100),
    YCoordinate int check (YCoordinate between -100 and 100)
)
go

-- DO NOT ALTER THIS PROCEDURE.  It builds your data set for testing.

-- procecure that generate random numbers of site
drop procedure GENERATE_N_FUMAR_SITES 
go

create procedure GENERATE_N_FUMAR_SITES (@siteCount AS DECIMAL)
as begin
    delete from FUMAR_SITES

    insert into FUMAR_SITES select 0, 'Original Position', 0, 0

    declare @siteNumber int
    set @siteNumber = 1

    while @siteNumber <= @siteCount begin
        insert into FUMAR_SITES 
        select @siteNumber, 'Site #' + convert(nvarchar, @siteNumber),
               100 - floor(rand()*200), 100 - floor(rand()*200)
        set @siteNumber = @siteNumber + 1
    end
end
go

exec GENERATE_N_FUMAR_SITES 6
go


-- HERE'S YOUR STUFF.  You should only put stuff where the comments are.

drop view FUMAR_PATHS
go

create view FUMAR_PATHS (StartSite, EndSite, Distance) as
    
    select a.SiteNumber as StartSite ,  --  start site
            b.SiteNumber as EndSite ,   -- end site
            SQRT(
              (a.XCoordinate - b.XCoordinate) * 
              (a.XCoordinate - b.XCoordinate) + 
              (a.YCoordinate - b.YCoordinate) *
              (a.YCoordinate - b.YCoordinate)
            ) as Distance         --   formula
            from FUMAR_SITES a INNER JOIN FUMAR_SITES b 
            ON b.SiteNumber <> a.SiteNumber   --  between two points each other 
go


drop procedure GET_SHORTEST_N_FUMAR_PATH
go

-- *** PART 2:
    -- Write this procedure so it calculates the shortest past from the
    -- Original Position to ALL nodes (but not back).
create procedure GET_SHORTEST_N_FUMAR_PATH
as begin
  DECLARE @site_count int;  -- total site count
  DECLARE @distance_two FLOAT; --  temperatilve distance between two sites
  DECLARE @start_time DateTime
  DECLARE @end_time DateTime
	
	SET @start_time = GETDATE()
    CREATE TABLE #site_counter  -- create temperative table (it saves all path and total distance)
    (
        site_path_index int NULL,   -- path from start site to end site 
        site_number int NULL,    -- total distance
    );
    CREATE TABLE #nodeestimate  -- create temperative table (it saves all path and total distance)
    (
        paths varchar(MAX) NULL,   -- path from start site to end site 
        distance float NULL,    -- total distance
    );
    -- calculate site count
    SELECT @site_count = COUNT(*) FROM FUMAR_SITES WHERE SiteNumber <> 0
    
    -- declare loop variable
    declare @loopNumber int
    set @loopNumber = 1

    -- init site_counter table with 1
    while @loopNumber <= @site_count begin
        insert into #site_counter(site_path_index,site_number) VALUES(@loopNumber,1)
        set @loopNumber = @loopNumber + 1
    end

    set @loopNumber = 1
    
    WHILE @site_count * @site_count > @loopNumber   -- here calculates all path's distance and save into temperative table
    BEGIN
        declare @loopNumber2 int
        set @loopNumber2 = 1
        declare @addNumber int
        set @addNumber = 0

        -- increase site_counter state
        while @loopNumber2 <= @site_count begin
            declare @temp_site int
            SELECT @temp_site = site_number FROM #site_counter WHERE site_path_index = @loopNumber2
            SET @temp_site = @temp_site + @addNumber

            IF @temp_site >= @site_count
            BEGIN
              SET @addNumber = 1;
              update #site_counter SET site_number = @temp_site - @site_count + 1 WHERE site_path_index = @loopNumber2
              SET @addNumber = 0
            END
            ELSE 
            BEGIN
              SET @temp_site = @temp_site + 1
              update #site_counter SET site_number = @temp_site WHERE site_path_index = @loopNumber2
              BREAK;
            END
            set @loopNumber2 = @loopNumber2 + 1
        end
        -- check if  site repeated
		SET @loopNumber2 = 0
		SELECT @loopNumber2 = site_number FROM #site_counter Group By site_number having COUNT(*) > 1 
		
		IF @loopNumber2 > 0
		BEGIN
		CONTINUE;
		END
        --here calculate distance of total path
        declare @loopNumber3 int
        declare @distance_one int
        declare @path_str varchar(MAX)
		declare @distance_sum int
		declare @start_site_num int
		declare @end_site_num int
		declare @continue_flag int
        set @loopNumber3 = 1
        set @distance_sum = 0
        set @distance_one = 0
        set @start_site_num = 0
        set @end_site_num = 0
		SET @path_str = ''
		set @continue_flag = 0
        
        while @loopNumber3 <= @site_count begin
            SELECT @end_site_num = site_number FROM #site_counter WHERE site_path_index = @loopNumber3
			
            SELECT @distance_one = Distance FROM FUMAR_PATHS WHERE StartSite=@start_site_num AND EndSite=@end_site_num
            SET @distance_sum = @distance_sum + @distance_one

            -- path
			declare @temp_str varchar(40)
			SELECT @temp_str = 'Site '+CAST(@start_site_num as varchar)+'(' + CAST(XCoordinate as varchar)+','+CAST(YCoordinate as varchar) + ') -->' FROM FUMAR_SITES WHERE SiteNumber = @start_site_num
			SET @path_str = CONCAT(@path_str,@temp_str)
            SET @start_site_num = @end_site_num
            set @loopNumber3 = @loopNumber3 + 1
        end
        
		IF @continue_flag = 1
		BEGIN
			SEt @continue_flag = 0
			CONTINUE;
		END
        INSERT INTO #nodeestimate(paths,distance) VALUES(@path_str,@distance_sum)

       SET @loopNumber = @loopNumber +1
    END;
	SET @end_time = GETDATE()
	
    select distance Distance,DATEDIFF(millisecond, @start_time,@end_time) ExecTime,paths ThePath FROM #nodeestimate WHERE distance = (SELECT MIN(distance) FROM #nodeestimate);
end
go

exec GET_SHORTEST_N_FUMAR_PATH
go
